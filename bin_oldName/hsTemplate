#!/usr/bin/env ruby

#2013-08-30 Takayuki Yuasa

#---------------------------------------------
# Template class
#---------------------------------------------
class TemplateText
	def initialize()
		@languageName="null"
	end
	def setOptions(options)

	end
	def to_s()

	end
	def getLanguageName()
		return @languageName
	end
end

#---------------------------------------------
# Ruby
#---------------------------------------------
class RubyTemplate < TemplateText
	def initialize()
		@languageName="ruby"
	end
	def to_s()
		puts <<EOS
#!/usr/bin/env ruby

if(ARGV.length==0)then
	puts ""
	exit
end

#---------------------------------------------
# main process
#---------------------------------------------

# insert here

EOS
	end
end


#---------------------------------------------
# C++
#---------------------------------------------
class CppTemplate < TemplateText
	def initialize()
		@languageName="cpp"
	end
	def to_s()
		puts <<EOS
#include <iostream>
#include <string>
#include <vector>

int main(int argc, char* argv[]){
	using namespace std;

}
EOS
	end
end


#---------------------------------------------
# Graphviz
#---------------------------------------------
class DotTemplate < TemplateText
	def initialize()
		@languageName="dot"
	end
	def to_s()
		puts <<EOS
graph g {
	rankdir=LR;
	graph [charset="UTF-8", fontname="Hiragino Kaku Gothic Pro"]
	node[shape=box, fontname="Hiragino Kaku Gothic Pro", style=filled, fillcolor="#eeeeee", fontsize=10];
	edge[splines=false];

	NodeA -- NodeB;
	NodeA -- NodeC;

	{
		rank = same; "NodeB"; "NodeC";
	}

}
EOS
	end
end


#---------------------------------------------
# MSC-Generator
#---------------------------------------------
class MscTemplate < TemplateText
	def initialize()
		@languageName="msc"
	end
	def to_s()
		puts <<EOS

EOS
	end
end


#---------------------------------------------
# xspec
#---------------------------------------------
class XspecTemplate < TemplateText
	def initialize(args)
		argsCloned=args.clone()
		@dataFile=""
		@backgroundFile="NONE"
		@responseFile="NONE"
		@arfFile="NONE"
		@correctionFile="NONE"
		@correctionNorm="1"
		argsCloned.shift
		for arg in argsCloned do
			if(arg.include?("data="))then
				@dataFile=arg.gsub("data=","")
			end
			if(arg.include?("background=") or arg.include?("back=") or arg.include?("bgd="))then
				@backgroundFile=arg.gsub("background=","").gsub("back=","").gsub("bgd=","")
			end
			if(arg.include?("arf="))then
				@arfFile=arg.gsub("arf=","")
			end
			if(arg.include?("response=") or arg.include?("resp="))then
				@responseFile=arg.gsub("response=","").gsub("resp=","")
			end
			if(arg.include?("corfile="))then
				@correctionFile=arg.gsub("corfile=","")
			end
			if(arg.include?("cornorm="))then
				@correctionNorm=arg.gsub("cornorm=","")
			end
		end
		
		@languageName="xspec"
	end
	def to_s()
		puts <<EOS
data #{@dataFile}
response #{@responseFile}
backgrnd #{@backgroundFile}
arf #{@arfFile}
corfile #{@correctionFile}
cornorm #{@correctionNorm}

setplot rebin 10,10,1
setplot energy
cpd /xs

EOS
	end
end


#---------------------------------------------
# main process
#---------------------------------------------

templates = {}
rubyTemplate=RubyTemplate.new
templates[rubyTemplate.getLanguageName()]=rubyTemplate
cppTemplate=CppTemplate.new
templates[cppTemplate.getLanguageName()]=cppTemplate
dotTemplate=DotTemplate.new
templates[dotTemplate.getLanguageName()]=dotTemplate
mscTemplate=MscTemplate.new
templates[mscTemplate.getLanguageName()]=mscTemplate
xspecTemplate=XspecTemplate.new(ARGV)
templates[xspecTemplate.getLanguageName()]=xspecTemplate

if(ARGV.length==0)then
	puts "Available templates:"
	templates.each(){|key,e|
		puts "  #{key}"
	}
end

languageName=ARGV[0]

puts templates[languageName].to_s()