#!/usr/bin/env ruby

#2013-08-30 Takayuki Yuasa

#---------------------------------------------
# Template class
#---------------------------------------------
class TemplateText
	def initialize()
		@languageName="null"
	end
	def setOptions(options)

	end
	def to_s()

	end
	def getLanguageName()
		return @languageName
	end
end

#---------------------------------------------
# cmake
#---------------------------------------------
class CmakeTemplate < TemplateText
	def initialize()
		@languageName="cmake"
	end
	def to_s()
		puts <<EOS
#=============================================
# Definition of project
#=============================================
project( --ProjectName-- CXX)
cmake_minimum_required(VERSION 2.8)
set(MAIN_TARGET --MainTarget-- )

set(CMAKE_CXX_FLAGS "-std=c++11 -stdlib=libc++ -g")
set(CMAKE_CXX_COMPILER "clang++")

#=============================================
# Initial definition of cmake variables
#=============================================
set(CMAKE_INSTALL_PREFIX $ENV{HOME} CACHE PATH "install prefix")
set(CMAKE_BUILD_TYPE Release CACHE STRING "build type")
set(CMAKE_CXX_FLAGS_DEBUG "-g -W -Wall" CACHE STRING "CXX_FLAGS for debug")
set(CMAKE_C_FLAGS_DEBUG "-g -W -Wall" CACHE STRING "C_FLAGS for debug")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -W -Wall" CACHE STRING "CXX_FLAGS for release")
set(CMAKE_C_FLAGS_RELEASE "-O3 -W -Wall" CACHE STRING "C_FLAGS for release")


#=============================================
# Include path
#=============================================
include_directories(
  include
)

#=============================================
# Link directories
#=============================================
link_directories(
	lib
)

#=============================================
# Optional include path and link directories
#=============================================
if(ADDITIONAL_INCLUDE_PATH)
	message(STATUS "ADDITIONAL_INCLUDE_PATH = ${ADDITIONAL_INCLUDE_PATH}")
	include_directories(
		${ADDITIONAL_INCLUDE_PATH}
	)
endif(ADDITIONAL_INCLUDE_PATH)
if(ADDITIONAL_LINK_DIRECTORY)
	message(STATUS "ADDITIONAL_LINK_DIRECTORY = ${ADDITIONAL_LINK_DIRECTORY}")
	link_directories(
		${ADDITIONAL_LINK_DIRECTORY}
	)
endif(ADDITIONAL_LINK_DIRECTORY)


#=============================================
# Executable definitions
#=============================================
#---------------------------------------------
# Executable source
#---------------------------------------------
add_executable(${MAIN_TARGET}
  --ExecutableSource.cc--
)

#---------------------------------------------
# Linked libraries
#---------------------------------------------
target_link_libraries(${MAIN_TARGET}
  cfitsio_3.35 xerces-c
)

#=============================================
# Installs
#=============================================
install_targets(/bin ${MAIN_TARGET})
EOS
	end
end


#---------------------------------------------
# Ruby
#---------------------------------------------
class RubyTemplate < TemplateText
	def initialize()
		@languageName="ruby"
	end
	def to_s()
		puts <<EOS
#!/usr/bin/env ruby

if(ARGV.length==0)then
	puts ""
	exit
end

#---------------------------------------------
# main process
#---------------------------------------------

# insert here

EOS
	end
end


#---------------------------------------------
# C++
#---------------------------------------------
class CppTemplate < TemplateText
	def initialize()
		@languageName="cpp"
	end
	def to_s()
		puts <<EOS
#include <iostream>
#include <string>
#include <vector>

int main(int argc, char* argv[]){
	using namespace std;

}
EOS
	end
end


#---------------------------------------------
# Graphviz
#---------------------------------------------
class DotTemplate < TemplateText
	def initialize()
		@languageName="dot"
	end
	def to_s()
		puts <<EOS
graph g {
	rankdir=LR;
	graph [charset="UTF-8", fontname="Hiragino Kaku Gothic Pro"]
	node[shape=box, fontname="Hiragino Kaku Gothic Pro", style=filled, fillcolor="#eeeeee", fontsize=10];
	edge[splines=false];

	NodeA -- NodeB;
	NodeA -- NodeC;

	{
		rank = same; "NodeB"; "NodeC";
	}

}
EOS
	end
end


#---------------------------------------------
# MSC-Generator
#---------------------------------------------
class MscTemplate < TemplateText
	def initialize()
		@languageName="msc"
	end
	def to_s()
		puts <<EOS

EOS
	end
end


#---------------------------------------------
# xspec
#---------------------------------------------
class XspecTemplate < TemplateText
	def initialize(args)
		argsCloned=args.clone()
		@dataFile=""
		@backgroundFile="NONE"
		@responseFile="NONE"
		@arfFile="NONE"
		@correctionFile="NONE"
		@correctionNorm="1"
		argsCloned.shift
		for arg in argsCloned do
			if(arg.include?("data="))then
				@dataFile=arg.gsub("data=","")
			end
			if(arg.include?("background=") or arg.include?("back=") or arg.include?("bgd="))then
				@backgroundFile=arg.gsub("background=","").gsub("back=","").gsub("bgd=","")
			end
			if(arg.include?("arf="))then
				@arfFile=arg.gsub("arf=","")
			end
			if(arg.include?("response=") or arg.include?("resp="))then
				@responseFile=arg.gsub("response=","").gsub("resp=","")
			end
			if(arg.include?("corfile="))then
				@correctionFile=arg.gsub("corfile=","")
			end
			if(arg.include?("cornorm="))then
				@correctionNorm=arg.gsub("cornorm=","")
			end
		end
		
		@languageName="xspec"
	end
	def to_s()
		puts <<EOS
data #{@dataFile}
response #{@responseFile}
backgrnd #{@backgroundFile}
arf #{@arfFile}
corfile #{@correctionFile}
cornorm #{@correctionNorm}

setplot rebin 10,10,1
setplot energy
cpd /xs

EOS
	end
end


#---------------------------------------------
# main process
#---------------------------------------------

templates = {}
cmakeTemplate=CmakeTemplate.new
templates[cmakeTemplate.getLanguageName()]=cmakeTemplate
rubyTemplate=RubyTemplate.new
templates[rubyTemplate.getLanguageName()]=rubyTemplate
cppTemplate=CppTemplate.new
templates[cppTemplate.getLanguageName()]=cppTemplate
dotTemplate=DotTemplate.new
templates[dotTemplate.getLanguageName()]=dotTemplate
mscTemplate=MscTemplate.new
templates[mscTemplate.getLanguageName()]=mscTemplate
xspecTemplate=XspecTemplate.new(ARGV)
templates[xspecTemplate.getLanguageName()]=xspecTemplate

if(ARGV.length==0)then
	puts "Available templates:"
	templates.each(){|key,e|
		puts "  #{key}"
	}
end

languageName=ARGV[0]

puts templates[languageName].to_s()
