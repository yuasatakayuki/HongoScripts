#!/usr/bin/env ruby

#20100601 Takayuki Yuasa
#20150610 Takayuki Yuasa
if(ARGV.length==0)then
name=`basename $0`
puts <<EOS
usage:
$name (file)

The input file should contain component declaration
or entity declaration of a vhdl module. This script
extract signal names, and then connect them to signals
that have the same names as the entities.
EOS
exit
end

if(!File.exist?(ARGV[0]))then
 puts "file not found...exit"
 exit
end

file=ARGV[0]
prefix=""
if(ARGV.length>1)then
  prefix=ARGV[1]
end

def convertSignalName(signalName)
  map={"din"=>"DataIn", "dout"=>"DataOut", "full"=>"Full", "empty"=>"Empty", "data_count"=>"DataCount",
    "clk"=>"Clock", "rst"=>"Reset", "wr_en"=>"WriteEnable", "rd_en"=>"ReadEnable"}
  if(map[signalName]!=nil)then
    return map[signalName]
  else
    return signalName
  end
end

flag=false
signals=[]
connections=[]
componentname=""
open(file).each {|line|
 line.gsub!(/--.*?$/,"")
 head=line.downcase.split(" ")[0]
 if(head==nil)then
  next
 end
 if(flag==true and (!head.include?("--")) and (!head.include?(")")) and (!head.include?("end")) )then
  a=line.split(" ")[0].split(":")
  signalName=convertSignalName(a[0])
  connections.push("#{a[0]} => #{prefix}#{signalName},")
  line=line.downcase
  line2=line.gsub(":in",": in").gsub(":out",": out")
  b=line2.split(" in ")[-1].split(" out ")[-1]
  if(!b.include?(";"))then
   b[b.length-1,1]=";"
  end
  signals.push("signal #{prefix}#{signalName} : #{b}")
 end
 if(line.downcase.include?("component ") and flag==false)then
  componentname=line.split(" ")[1]
 end
 if(line.downcase.include?("entity ") and flag==false)then
  componentname=line.split(" ")[1]
 end
 if(line.downcase.include?("port") and line.include?("("))then
  flag=true
 end
}

print_signals=signals.join()
print_connections=connections.join("\n ")
i=print_connections.rindex(",")
print_connections[i,1]=" "

print <<EOS
#{print_signals}

instanceOf#{componentname} : #{componentname}
port map(
 #{print_connections}
);
EOS

